dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
132 + 95 + 276 + 113
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
log10(0.05)
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
library(QTLRel)
?scanOe
?scanOne
library(tissuesGeneExpression)
data("tissuesGeneExpression")
library(genefilter)
y = e[,which(tissue=="endometrium")]
head(y)
var = apply(y, 1, var)
qqnorm(var)
lines(1, 1)
abline(0, 1)
qqnorm(sqrt(var))
library(limma)
?fitFDist
fitFDist(apply(y, 1, var), 14)
ps <- (seq(along=s2)-0.5)/length(s2)
s2 <- rowVars(y)
ps <- (seq(along=s2)-0.5)/length(s2)
ps
summary(ps)
estiamte=fitFDist(apply(y, 1, var), 14)
estimate$scale
x=fitFDist(apply(y, 1, var), 14)
x$scale
?qf
estimates = x
ps <- (seq(along=s2)-0.5)/length(s2)
theoretical<- qf(ps,14,estimates$df2)*estimates$scale
theoretical
hist(theoretical)
summary(ps)
seq(along = 5)
seq(along = 1:5)
qqplot(sqrt( theoretical ), sqrt( s2 ),ylim=LIM,xlim=LIM)
qqplot(sqrt( theoretical ), sqrt( s2 ))
?fitFDist
0.45 * 0.55
0.45 * 0.55 / 20
0.45 * 0.55 * 20
sqrt(0.45 * 0.55 * 20)
sqrt(0.45 * 0.55 * 20) / 20
library(Biobase)
library(SpikeInSubset)
data(rma95)
y <- exprs(rma95)
pData(rma95)
g <- factor(rep(0:1,each=3))
spike <- rownames(y) %in% colnames(pData(rma95))
spike
library(genefilter)
x = rowttests(y, g)
?rowttests
str(x)
head(x)
sig = x$p.value < 0.01
table(sig)
1 - sum(spike & sig ) / sum(sig)
head(y)
?rowVar
rowvar
?rowVars
sds = rowSds(y[, 1:3])
sds
spike
sig
group = spike
group[sig] = true_pos
x = rep("T_POS", length(spike))
x
x[(! sig) & spike] = "F_NEG"
x[(! sig) & (! spike)] = "T_NEG"
x[(sig) & (! spike)] = "F_POS"
x
boxplot(x)
?boxplot
table(x)
boxplot(sds, x)
boxplot(sds ~ x)
boxplot(split(sds, x))
library(limma)
fit <- lmFit(y, design=model.matrix(~ g))
colnames(coef(fit))
fit[[1]]
length(fit)
coef(fit)
head(coef(fit))
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
fit <- eBayes(fit)
posteriorSD = sqrt(fit$s2.post)
plot(sampleSD, posteriorSD)
abline(0, 1)
mean(sampleSD)
pvals = fit$p.value[,2]
length(pvals)
length(spike)
1 - sum(pvals < 0.01 & spike) / sum(spike)
sum(pvals < 0.01 & spike) / sum(pvals < 0.01)
library(limma)
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
1 - sum(pvals < 0.01 & spike) / sum(spike)
pvals
pvals < 0.01
table(pvals < 0.01)
names(fit)
head(fit$p.value)
pvals = fit$p.value[, 2]
table(pvals < 0.01)
table(spikes)
table(spike)
rowttest(y)
rowttests(y)
y = rowttests(y)
head(y)
table(y[, 3] < 0.01)
y = rowttests(y, g)
g
y <- exprs(rma95)
z = rowttests(y, g)
table(z[, 3] < 0.01)
pvals
all(rownames(pvals) == names(spike))
sum((! pvals < 0.01) & spike)/ sum(pvals < 0.01)
sum((pvals < 0.01) & (! spike))/ sum(pvals < 0.01)
5.3 * 52
?pt
?qr
head(y)
y1 = y[1, ]
y1
g
lm(y1 ~ g)
summary(lm(y1 ~ g))
g
-0.0744 / 0.10605
?mrlm
?rlm
library(MASS)
?rlm
head(y)
rowVars(y)
vars = rowVars(y)
hist(vars)
hist(sqrt(vars))
?seq
seq(0, 1, by = 0.01)
p = seq(0, 1, by = 0.01)
6 * p * (1 - p)
sum(6 * p * (1 - p))
pi = 6 * p * (1 - p)
plot(p, pi)
mean(pi)
head(y)
dim(y)
x = rowVars(y[, 1:3])
x
n = length(x)
n
?pmax
pmax(x)
min(5:1)
pmin(5:1)
pmin(5:1, pi)
pmax(x, 0)
k = rnorm(10)
k
pmax(k, 0)
log(x)
digamma(11/2)
?digamma
log(11/2)
z <- log(x)
e <- z-digamma(df1/2)+log(df1/2)
df1 = 11
e <- z-digamma(df1/2)+log(df1/2)
emean <- mean(e)
evar <- sum((e-emean)^2)/(n-1)
evar <- evar - mean(trigamma(df1/2))
evar
df2 <- 2*trigammaInverse(evar)
s20 <- exp(emean+digamma(df2/2)-log(df2/2))
df2
s20
fitFDist(x, 11)
?sampling
library(rstan)
?sampling
log10
?matboxplot
library(quantro)
?matboxplot
library(dplyr)
library(genefilter)
library(Biobase)
library(ggplot2)
library(biomaRt)
library(qvalue)
library(DESeq2)
library(quantro)
rm(list = ls())
setwd("~/Dropbox/GitHub/Lupus")
load("bRNA/gene_expression_tpm.rdt")
data <- gene_expression_tpm[rowMax(gene_expression_tpm) > 10, ] %>% as.data.frame
group <- factor(names(data), levels = c("BXSB", "BXSB_B6"))
group
matboxplot(data, groupFactor = group)
matboxplot(log2(data + 1), groupFactor = group)
library(preprocessCore)
data.norm <- normalize.quantiles(data, copy = TRUE)
data.norm <- normalize.quantiles(as.matrix(data), copy = TRUE)
dim(data.norm)
dimnames(data.norm) <- dimnames(data)
qqplot(data[, 1], data[, 7], xlab = "BXSB_B6", ylab = "BXSB")
qqplot(data_norm[, 1], data[, 7], xlab = "BXSB_B6", ylab = "BXSB")
data_norm <- normalize.quantiles(as.matrix(data), copy = TRUE)
dimnames(data_norm) <- dimnames(data)
qqplot(data_norm[, 1], data[, 7], xlab = "BXSB_B6", ylab = "BXSB")
qqplot(data_norm[, 1], data_norm[, 7], xlab = "BXSB_B6", ylab = "BXSB")
head(data_norm)
head(data)
objectMedians <- apply(data, 2, median)
(objectMedians <- apply(data, 2, median))
rowMax(data) > 35e3
rowMax(as.matrix(data)) > 35e3
data[rowMax(as.matrix(data)) > 35e3, ]
data[rowMax(as.matrix(data)) > 3e4, ]
data[rowMax(as.matrix(data)) > 2e4, ]
data[-"ENSMUSG00000076609", ]
data["ENSMUSG00000076609", ]
data <- data[! rownames(data) == "ENSMUSG00000076609", ]
matboxplot(log2(data + 1), groupFactor = group)
(objectMedians <- apply(data, 2, median))
colSums(data)
colMedian(data)
rowMedians(data)
?rowMedians
?colMedians
library(matrixStats)
colMedians(data)
colMedians(as.matrix(data))
?sweep
objectMedians <- colMedians(as.matrix(data))
normalize.median <- sweep(data, 2, objectMedians, FUN = "-")
colMedians(as.matrix(normalize.median))
colSums(normalize.median)
qqplot(normalize.median[, 1], normalize.median[, 7], xlab = "BXSB_B6", ylab = "BXSB")
summary(normalize.median[, 1])
min(normalize.median)
data <- normalize.median + min(normalize.median)
ttest <- rowttests(as.matrix(log2(data + 1)), group) # ttests
head(data)
head(normalize.median)
head(normalize.median + 1)
min(normalize.median)
data <- normalize.median - min(normalize.median)
ttest <- rowttests(as.matrix(log2(data + 1)), group) # ttests
head(data)
colSums(data)
data$BXSB_avg <- rowMeans(data[group == "BXSB"])
data$BXSB_B6_avg <- rowMeans(data[group == "BXSB_B6"])
data$log2fold <- with(data, log2(BXSB_B6_avg + 1) - log2(BXSB_avg + 1))
data <- cbind(data, ttest)
data$q.value <- qvalue(data$p.value)$qvalues
(data_select <- data[abs(data$log2fold) > 0.2 & data$q.value < 0.05, ])
ensembl_gene_id <- rownames(data_select)
ensembl_mart <- useMart(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
biomart <- getBM(c("ensembl_gene_id", "external_gene_name"), "ensembl_gene_id", ensembl_gene_id, ensembl_mart)
symbol <- biomart$external_gene_name
symbol1 <- biomart$external_gene_name[match(ensembl_gene_id, biomart$ensembl_gene_id)]
all(symbol == symbol1)
symbol <- biomart$external_gene_name %>% unique
symbol <- biomart$external_gene_name
which(is.na(symbol))
symbol <- biomart$external_gene_name[match(ensembl_gene_id, biomart$ensembl_gene_id)]
which(is.na(symbol))
ensembl_gene_id[which(is.na(symbol))]
symbol <- biomart$external_gene_name %>% unique
head(ttest)
library(dplyr)
library(genomation)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(VariantAnnotation)
library(ggplot2)
rm(list = ls())
setwd("~/Dropbox/GitHub/ATAC/")
(files = list.files("broadPeak/"))
peaks = lapply(files, function(x) readBroadPeak(paste0("broadPeak/", x)))
names(peaks) = gsub("_S[1-9]_.*", "", files)
peaks[1]
x = peaks[[1]]
info(x)
length(x)
sapply(peaks, length)
neuron_file <- "Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt"
astrocyte_file <- "Astrocytes_vs_neurons.HOMER_sorted_final_header_positive.txt"
neuron <- read.delim(paste0("diff/", neuron_file), stringsAsFactors = F)
astrocyte <- read.delim(paste0("diff/", astrocyte_file), stringsAsFactors = F)
neuron <- dplyr::select(neuron, -one_of("chr", "start", "end", "strand", "width"))
neuron_gr <- makeGRangesFromDataFrame(neuron, keep.extra.columns = T)
astrocyte <- dplyr::select(astrocyte, -one_of("chr", "start", "end", "strand", "width"))
astrocyte_gr <- makeGRangesFromDataFrame(astrocyte, keep.extra.columns = T)
neuron_gwas_gr = subsetByOverlaps(gwas_gr, neuron_gr)
neuron_gwas_gr %>% reduce
astrocyte_gwas_gr = subsetByOverlaps(gwas_gr, astrocyte_gr)
astrocyte_gwas_gr %>% reduce
length(neuron_gr)
length(astrocyte_gr)
peaks[[1]]
ranges(peaks[[1]])
ranges(neuron_gr)
gene.parts = readTranscriptFeatures("bed/hg19_refseq_ucsc.bed")
names(gene.parts)
promoters(gene.parts)
width(promoters(gene.parts))
TSSes(gene.parts)
gene.parts$promoters
width(gene.parts$promoters)
gene.parts$promoters
gene.parts$TSSes
66998638 + 1000
summry(width(peaks[[1]]))
summary(width(peaks[[1]]))
summary(width(neuron_gr))
summary(width(astrocyte_gr))
x = subsetByOverlap(peaks[[1]], neuron_gr)
library(GenomicFeatures)
x = subsetByOverlaps(peaks[[1]], neuron_gr)
y = subsetByOverlaps(peaks[[1]], astrocyte_gr)
intersect(x, y)
x
peaks[[1]]
y
length(x)
length(y)
names(peaks)
x
ranges(x)
ranges(peaks[[1]])
ranges(y)
dir()
load(atac_gwas.rdt)
load("atac_gwas.rdt")
load("../Adsp/data/glmList.rdt"); list <- glmList
for(obj in names(list)) assign(obj, list[[obj]])
vep$Symbol <- gsub(".*SYMBOL=(.*)", "\\1", vep$Symbol)
gwas_lod <- filter(gwas, LOD > 15) # permutation cut
vep_lod <- filter(vep, UID %in% gwas_lod$UID)
gwas_vep <- cbind(vep_lod, gwas_lod[match(vep_lod$UID, gwas_lod$UID), -1])
gwas_vep <- dplyr::mutate(gwas_vep, start = POS, end = POS)
gwas_gr <- makeGRangesFromDataFrame(gwas_vep, keep.extra.columns = T)
gwas_gr <- renameSeqlevels(gwas_gr, paste0("chr", seqlevels(gwas_gr)))
atac_gwas_gr <- lapply(peaks, function(idx) subsetByOverlaps(gwas_gr, idx))
neuron_gwas_gr = subsetByOverlaps(gwas_gr, neuron_gr)
neuron_gwas_gr$Symbol
astrocyte_gwas_gr$Symbol
astrocyte_gwas_gr = subsetByOverlaps(gwas_gr, astrocyte_gr)
astrocyte_gwas_gr$Symbol
atac_gwas_gr <- lapply(peaks, function(idx) subsetByOverlaps(gwas_gr, idx))
names(atac_gwas_gr)
lapply(atac_gwas_gr[1:3], function(x) unique(x$Symbol))
lapply(atac_gwas_gr[1:3], function(x) x$Symbol) %>% unlist %>% unique
names(atac_gwas_gr)
lapply(atac_gwas_gr[grep("astrocytes", names(atac_gwas_gr))], function(x) x$Symbol) %>% unlist %>% unique
lapply(atac_gwas_gr[grep("neurons", names(atac_gwas_gr))], function(x) x$Symbol) %>% unlist %>% unique
gene_astrocytes = lapply(atac_gwas_gr[grep("astrocytes", names(atac_gwas_gr))], function(x) x$Symbol) %>% unlist %>% unique
gene_neurons = lapply(atac_gwas_gr[grep("neurons", names(atac_gwas_gr))], function(x) x$Symbol) %>% unlist %>% unique
intersect(gene_astrocytes, gene_neurons)
gene.parts
peaks[[1]]
astrocyte_gwas_gr$Symbol
