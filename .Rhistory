pdf("~/Dropbox/ADSP/kinship/kin-compare.pdf")
pheatmap(cor(compare), display_number = T, treeheight_row = 0, cellwidth = 30, cellheight = 30, fontsize_number = 6)
# heatmap(cor(kinship23))
dev.off()
pedigree = c(rep("within", 1545), rep("between", 164055))
kin.dt <- data.frame(kinship = c(kin23),
chr = rep(colnames(kin23), each = nrow(kin23)),
pedigree = rep(pedigree, 23))
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf", width = 5)
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome2.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship, fill = pedigree)) + geom_density(alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(fill = pedigree, alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) + geom_density(aes(fill = pedigree), alpha = .5) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12))
#       legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(color = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/ADSP/kinship/kin-autosome.pdf")
ggplot(kin.dt[kin.dt$chr == "autosome", ], aes(kinship)) +
geom_density(aes(fill = pedigree), alpha = .5) +
scale_fill_manual(values = c("dodgerblue3", "firebrick1")) +
theme_bw() + xlab("") + ylab("Density") +
theme(panel.border = element_blank(),
axis.line = element_line(color = 'grey30'),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12, vjust = 1),
legend.text = element_text(size = 12),
legend.title = element_blank())
dev.off()
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
install.packages("namespace")
library(WGCNA)
install.packages("impute")
library(WGCNA)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("Biobase", lib.loc="~/Library/R/3.1/library")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "reshape", "fastcluster", "dynamicTreeCut", "survival")
)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach",
title: "myfile"
?seq
132 + 95 + 276 + 113
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
log10(0.05)
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
shiny::runApp('Dropbox/GitHub/SCR/shiny')
library(QTLRel)
?scanOe
?scanOne
library(tissuesGeneExpression)
data("tissuesGeneExpression")
library(genefilter)
y = e[,which(tissue=="endometrium")]
head(y)
var = apply(y, 1, var)
qqnorm(var)
lines(1, 1)
abline(0, 1)
qqnorm(sqrt(var))
library(limma)
?fitFDist
fitFDist(apply(y, 1, var), 14)
ps <- (seq(along=s2)-0.5)/length(s2)
s2 <- rowVars(y)
ps <- (seq(along=s2)-0.5)/length(s2)
ps
summary(ps)
estiamte=fitFDist(apply(y, 1, var), 14)
estimate$scale
x=fitFDist(apply(y, 1, var), 14)
x$scale
?qf
estimates = x
ps <- (seq(along=s2)-0.5)/length(s2)
theoretical<- qf(ps,14,estimates$df2)*estimates$scale
theoretical
hist(theoretical)
summary(ps)
seq(along = 5)
seq(along = 1:5)
qqplot(sqrt( theoretical ), sqrt( s2 ),ylim=LIM,xlim=LIM)
qqplot(sqrt( theoretical ), sqrt( s2 ))
?fitFDist
0.45 * 0.55
0.45 * 0.55 / 20
0.45 * 0.55 * 20
sqrt(0.45 * 0.55 * 20)
sqrt(0.45 * 0.55 * 20) / 20
library(Biobase)
library(SpikeInSubset)
data(rma95)
y <- exprs(rma95)
pData(rma95)
g <- factor(rep(0:1,each=3))
spike <- rownames(y) %in% colnames(pData(rma95))
spike
library(genefilter)
x = rowttests(y, g)
?rowttests
str(x)
head(x)
sig = x$p.value < 0.01
table(sig)
1 - sum(spike & sig ) / sum(sig)
head(y)
?rowVar
rowvar
?rowVars
sds = rowSds(y[, 1:3])
sds
spike
sig
group = spike
group[sig] = true_pos
x = rep("T_POS", length(spike))
x
x[(! sig) & spike] = "F_NEG"
x[(! sig) & (! spike)] = "T_NEG"
x[(sig) & (! spike)] = "F_POS"
x
boxplot(x)
?boxplot
table(x)
boxplot(sds, x)
boxplot(sds ~ x)
boxplot(split(sds, x))
library(limma)
fit <- lmFit(y, design=model.matrix(~ g))
colnames(coef(fit))
fit[[1]]
length(fit)
coef(fit)
head(coef(fit))
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
fit <- eBayes(fit)
posteriorSD = sqrt(fit$s2.post)
plot(sampleSD, posteriorSD)
abline(0, 1)
mean(sampleSD)
pvals = fit$p.value[,2]
length(pvals)
length(spike)
1 - sum(pvals < 0.01 & spike) / sum(spike)
sum(pvals < 0.01 & spike) / sum(pvals < 0.01)
library(limma)
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
1 - sum(pvals < 0.01 & spike) / sum(spike)
pvals
pvals < 0.01
table(pvals < 0.01)
names(fit)
head(fit$p.value)
pvals = fit$p.value[, 2]
table(pvals < 0.01)
table(spikes)
table(spike)
rowttest(y)
rowttests(y)
y = rowttests(y)
head(y)
table(y[, 3] < 0.01)
y = rowttests(y, g)
g
y <- exprs(rma95)
z = rowttests(y, g)
table(z[, 3] < 0.01)
pvals
all(rownames(pvals) == names(spike))
sum((! pvals < 0.01) & spike)/ sum(pvals < 0.01)
sum((pvals < 0.01) & (! spike))/ sum(pvals < 0.01)
5.3 * 52
?pt
?qr
head(y)
y1 = y[1, ]
y1
g
lm(y1 ~ g)
summary(lm(y1 ~ g))
g
-0.0744 / 0.10605
?mrlm
?rlm
library(MASS)
?rlm
head(y)
rowVars(y)
vars = rowVars(y)
hist(vars)
hist(sqrt(vars))
?seq
seq(0, 1, by = 0.01)
p = seq(0, 1, by = 0.01)
6 * p * (1 - p)
sum(6 * p * (1 - p))
pi = 6 * p * (1 - p)
plot(p, pi)
mean(pi)
head(y)
dim(y)
x = rowVars(y[, 1:3])
x
n = length(x)
n
?pmax
pmax(x)
min(5:1)
pmin(5:1)
pmin(5:1, pi)
pmax(x, 0)
k = rnorm(10)
k
pmax(k, 0)
log(x)
digamma(11/2)
?digamma
log(11/2)
z <- log(x)
e <- z-digamma(df1/2)+log(df1/2)
df1 = 11
e <- z-digamma(df1/2)+log(df1/2)
emean <- mean(e)
evar <- sum((e-emean)^2)/(n-1)
evar <- evar - mean(trigamma(df1/2))
evar
df2 <- 2*trigammaInverse(evar)
s20 <- exp(emean+digamma(df2/2)-log(df2/2))
df2
s20
fitFDist(x, 11)
?sampling
library(rstan)
?sampling
log10
library(dplyr)
library(genomation)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(VariantAnnotation)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
promoters(txdb)
names(txdb)
txdb
?FeatureDb
features(txdb)
metadata(txdb)
seqinfo(txdb)
ls(txdb)
getClass(txdb)
intron(txdb)
introns(txdb)
allVariants()
AllVariants()
?locateVariants
coding(txdb)
exon(txdb)
exons(txdb)
library(dplyr)
library(genomation)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(VariantAnnotation)
setwd("~/Dropbox/GitHub/ATAC/")
rm(list = ls())
setwd("~/Dropbox/GitHub/ATAC/")
?list.files
list.files("broadPeak")
files = list.files("broadPeak/")
files
peaks = lapply(files, function(x) readBroadPeak(paste0("broadPeak/", x)))
names(peaks)
names(peaks) = gsub("_S[1-9]_.*", "", files)
names(peaks)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
summary(mcols(x)$score)  # is filter required?
x = peaks[[1]]
summary(mcols(x)$score)  # is filter required?
promoters(txdb)
ScoreMatrix(target = x, windows = promoters(txdb))
?annotateWithFeature
annotateWithFeature(target = x, feature = promoters(txdb))
?locateVariants
transcripts(txdb)
exons(txdb)
cds(txdb)
introns(txdb)
promoters(txdb)
?intronsByTranscript
intronsByTranscript(txdb)
intronsByTranscript(txdb) %>% unlist
exons(txdb)
gene.parts = readTranscriptFeatures("~/Downloads/hg19_refseq_ucsc.bed")
gene.parts
annotateWithGeneParts(x, gene.parts)
gene.parts
names(genes.parts)
names(gene.parts)
gene.parts$TSSes
seqnames(x)
names(gene.parts)
annotateWithFeature(target = x, feature = gene.parts$exons)
readBed("bed/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt")
readBed("bed/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt", track.line = 1)
readGeneric("bed/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt", track.line = 1)
readGeneric("bed/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt")
?readGeneric
readGeneric("bed/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt", header = T)
problems
problems()
problems()
readGeneric("diff/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt", header = T)
readGeneric("diff/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt", chr = 1, start = 2, end = 3, header = T)
readGeneric("diff/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt", chr = 1, start = 2, end = 3, header = T, sep = "\t")
readGeneric("diff/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt", chr = 1, start = 2, end = 3, header = T, sep = " ")
neuron <- read.delim("diff/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt", stringsAsFactors = F)
astrocyte <- read.delim("diff/Astrocytes_vs_neurons.HOMER_sorted_final_header_positive.txt", stringsAsFactors = F)
?GRanges
names(neuron)
neuron_gr <- with(neuron, GRanges(seqnames = Rle(Chr), ranges = IRanges(start = Start, end = End))
)
neuron_gr
neuron_gr <- with(neuron, GRanges(seqnames = Rle(Chr), ranges = IRanges(start = Start, end = End), strand = Rle(Strand)))
neuron_gr
names(neuron)
neuron_gr <- with(neuron, GRanges(seqnames = Rle(Chr), ranges = IRanges(start = Start, end = End), strand = Rle(Strand)), mcols = neuron[, 5:29])
neuron_gr
neuron_gr <- with(neuron, GRanges(seqnames = Rle(Chr), ranges = IRanges(start = Start, end = End), strand = Rle(Strand)), mcols = neuron[, 5:29])
neuron_gr
neuron_gr <- makeGRangesFromDataFrame(neuron, keep.extra.columns=T,
seqnames.field="Chr", start.field="Start", end.field="End", strand.field="Strand")
names(neuron)
?makeGRangesFromDataFrame
neuron$Start
neuron_gr <- makeGRangesFromDataFrame(neuron, keep.extra.columns=T,
seqnames.field = "Chr", start.field = "Start", end.field = "End", strand.field="Strand",
starts.in.df.are.0based=FALSE)
neuron_gr <- makeGRangesFromDataFrame(neuron, keep.extra.columns = T,
seqnames.field = "Chr", start.field = "start", end.field = "End", strand.field="Strand")
head(neuron)
df <- data.frame(chr="chr1", start=11:13, end=12:14,
strand=c("+","-","+"), score=1:3)
makeGRangesFromDataFrame(df)
df
colnames(df)
names(df)
names(df) = c("Chr", "Start", "End", "Strand, "Score"")
names(df) = c("Chr", "Start", "End", "Strand, "Score)
names(df) = c("Chr", "Start", "End", "Strand", "Score")
makeGRangesFromDataFrame(df)
df
makeGRangesFromDataFrame(df, start.field = "Start")
makeGRangesFromDataFrame(df,
seqnames.field = "Chr", start.field = "Start", end.field = "End", strand.field="Strand")
neuron_gr <- makeGRangesFromDataFrame(neuron, keep.extra.columns = T)
str(neuron)
str(df)
names(df)
names(neuron)
head(neuron)
neuron$chr = neuron$start = neuron$end = NULL
neuron_gr <- makeGRangesFromDataFrame(neuron, keep.extra.columns = T,
seqnames.field = "Chr", start.field = "Start", end.field = "End", strand.field="Strand")
neuron <- with(neuron, start = end = NULL)
neuron <- with(neuron, FDR = p.value = NULL)
?select
neuron <- select(neuron, -one_of("start", "end"))
neuron <- dplyr::select(neuron, -one_of("start", "end"))
neuron <- dplyr::select(neuron, -one_of("chr", "start", "end", "strand"))
names(neuron)
neuron_gr <- makeGRangesFromDataFrame(neuron, keep.extra.columns = T)
neuron <- dplyr::select(neuron, -one_of("chr", "start", "end", "strand", "width"))
neuron_gr <- makeGRangesFromDataFrame(neuron, keep.extra.columns = T)
neuron_gr
astrocyte <- dplyr::select(astrocyte, -one_of("chr", "start", "end", "strand", "width"))
astrocyte_gr <- makeGRangesFromDataFrame(astrocyte, keep.extra.columns = T)
load("../Adsp/data/glmList.rdt"); list <- glmList
for(obj in names(list)) assign(obj, list[[obj]])
vep$Symbol <- gsub(".*SYMBOL=(.*)", "\\1", vep$Symbol)
head(gwas)
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
nrow(gwas.lod)
gwas.lod <- filter(gwas, LOD > quantile(gwas$LOD, 0.99)) # 0.01%
nrow(gwas.lod)
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
vep.lod <- filter(vep, UID %in% gwas.lod$UID)
head(vep.lod)
head(vep.lod, n = 100)
gwas_vep_lod <- cbind(vep.lod, gwas.lod[match(vep.lod$UID, gwas.lod$UID), ])
head(gwas_vep_lod)
gwas_vep_lod <- dplyr::mutate(gwas_vep_lod, chr = gsub("-.*", "", UID), start = gsub(".*-", "", UID))
names(gwas_vep_lod)
head(gwas_vep_lod)
head(vep.lod)
head(gwas.lod)
gwas_vep_lod <- cbind(vep.lod, gwas.lod[match(vep.lod$UID, gwas.lod$UID), -1])
gwas_vep_lod <- dplyr::mutate(gwas_vep_lod, chr = gsub("-.*", "", UID), start = gsub(".*-", "", UID))
gwas_vep_gr <- makeGRangesFromDataFrame(gwas_vep_lod, keep.extra.columns = T)
names(gwas_vep_lod)
gwas_vep_lod$end <- gwas_vep_lod$start
gwas_vep_gr <- makeGRangesFromDataFrame(gwas_vep_lod, keep.extra.columns = T)
gwas_vep_lod$chr = NULL
gwas_vep_gr <- makeGRangesFromDataFrame(gwas_vep_lod, keep.extra.columns = T)
str(gwas_vep_gr)
str(gwas_vep_lod)
gwas_vep_lod <- cbind(vep.lod, gwas.lod[match(vep.lod$UID, gwas.lod$UID), -1])
gwas_vep_lod <- dplyr::mutate(gwas_vep_lod, start = POS, end = POS)
gwas_vep_gr <- makeGRangesFromDataFrame(gwas_vep_lod, keep.extra.columns = T)
gwas_vep_gr
seqnames(gwas_vep_gr)
gwas_lod <- filter(gwas, LOD > 15) # permutation cut
vep_lod <- filter(vep, UID %in% gwas_lod$UID)
gwas_vep <- cbind(vep_lod, gwas.lod[match(vep_lod$UID, gwas_lod$UID), -1])
gwas_vep <- dplyr::mutate(gwas_vep, start = POS, end = POS)
gwas_gr <- makeGRangesFromDataFrame(gwas_vep, keep.extra.columns = T)
